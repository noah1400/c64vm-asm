REF SQRT_SUBROUTINE

LDI r1, $7919         ; Load the number to check for primality

TF r3, r1             ; Copy r1 to r3 to keep the original number intact
CMPI r1, $2           ; Compare the number with 2

JLT NOT_PRIME         ; Jump to NOT_PRIME if the number is less than 2
JEQ PRIME             ; Jump to PRIME if the number is exactly 2

:CHECK_EVEN
TF r4, r3             ; Copy r3 to r4
MODI r4, $2           ; r4 = r4 % 2
JEQ NOT_PRIME         ; If even, it's not prime

TF r1, r3             ; Copy the number to r1 before calling square root subroutine
BRA SQRT_SUBROUTINE   ; Branch to the square root subroutine
TF r4, r1             ; Copy the result back to r4 to use as limit in the loop

LDI r5, $3            ; Start divisor from 3

:LOOP
CMP r4, r5            ; Compare divisor with sqrt(n)
JGT PRIME             ; If divisor > sqrt(n), it is prime

TF r6, r3             ; Copy the number to r6 for modulus operation
MOD r6, r5            ; r6 = r6 % r5
JEQ NOT_PRIME         ; If divisible, not prime

ADDI r5, $2           ; Increment divisor by 2 (check only odd numbers)
JMP LOOP              ; Repeat loop

:PRIME
LDI r2, $1            ; Mark as prime
JMP END               ; Go to end

:NOT_PRIME
LDI r2, $0            ; Mark as not prime

:END
HLT                   ; Halt the program
